'use strict';

var config = require('/opt/cocorico/api-web/config.json');

var keystone = require('keystone');
var Web3 = require('web3');

function getBlockchainStatus() {
  var web3 = new Web3();
  web3.setProvider(new web3.providers.HttpProvider('http://127.0.0.1:8545'));

  return web3.isConnected();
}

function getBlockchainMinerStatus() {
  var web3 = new Web3();
  web3.setProvider(new web3.providers.HttpProvider('http://127.0.0.1:8545'));

  return web3.isConnected() && web3.eth.mining;
}

function getQueueStatus(callback) {
  require('amqplib/callback_api').connect('amqp://localhost', function (err, conn) {
    if (err != null) return callback(false);

    return callback(true);
  });
}

function getDatabaseStatus() {
  return keystone.mongoose.connection.readyState !== 0;
}

exports.getStatus = function (req, res) {
  getQueueStatus(function (queueIsConnected) {
    var blockchainMinerIsConnected = getBlockchainMinerStatus();
    var databaseIsConnected = getDatabaseStatus();

    return res.apiResponse({
      system: {
        blockchainNode: getBlockchainStatus(),
        blockchainMiner: blockchainMinerIsConnected,
        blockchainVote: config.capabilities.bill.vote === 'blockchain',
        database: databaseIsConnected,
        queue: queueIsConnected
      },
      capabilities: {
        vote: config.blockchain.voteEnabled ? queueIsConnected && blockchainMinerIsConnected : databaseIsConnected,
        createBill: config.capabilities.bill.create && (config.capabilities.bill.vote === 'blockchain' ? blockchainMinerIsConnected : databaseIsConnected),
        readBill: config.capabilities.bill.read && databaseIsConnected
      }
    });
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYXBpL3NlcnZpY2UuanMiXSwibmFtZXMiOlsiY29uZmlnIiwicmVxdWlyZSIsImtleXN0b25lIiwiV2ViMyIsImdldEJsb2NrY2hhaW5TdGF0dXMiLCJ3ZWIzIiwic2V0UHJvdmlkZXIiLCJwcm92aWRlcnMiLCJIdHRwUHJvdmlkZXIiLCJpc0Nvbm5lY3RlZCIsImdldEJsb2NrY2hhaW5NaW5lclN0YXR1cyIsImV0aCIsIm1pbmluZyIsImdldFF1ZXVlU3RhdHVzIiwiY2FsbGJhY2siLCJjb25uZWN0IiwiZXJyIiwiY29ubiIsImdldERhdGFiYXNlU3RhdHVzIiwibW9uZ29vc2UiLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsImV4cG9ydHMiLCJnZXRTdGF0dXMiLCJyZXEiLCJyZXMiLCJxdWV1ZUlzQ29ubmVjdGVkIiwiYmxvY2tjaGFpbk1pbmVySXNDb25uZWN0ZWQiLCJkYXRhYmFzZUlzQ29ubmVjdGVkIiwiYXBpUmVzcG9uc2UiLCJzeXN0ZW0iLCJibG9ja2NoYWluTm9kZSIsImJsb2NrY2hhaW5NaW5lciIsImJsb2NrY2hhaW5Wb3RlIiwiY2FwYWJpbGl0aWVzIiwiYmlsbCIsInZvdGUiLCJkYXRhYmFzZSIsInF1ZXVlIiwiYmxvY2tjaGFpbiIsInZvdGVFbmFibGVkIiwiY3JlYXRlQmlsbCIsImNyZWF0ZSIsInJlYWRCaWxsIiwicmVhZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxRQUFRLG1DQUFSLENBQWI7O0FBRUEsSUFBSUMsV0FBV0QsUUFBUSxVQUFSLENBQWY7QUFDQSxJQUFJRSxPQUFPRixRQUFRLE1BQVIsQ0FBWDs7QUFFQSxTQUFTRyxtQkFBVCxHQUErQjtBQUM3QixNQUFJQyxPQUFPLElBQUlGLElBQUosRUFBWDtBQUNBRSxPQUFLQyxXQUFMLENBQWlCLElBQUlELEtBQUtFLFNBQUwsQ0FBZUMsWUFBbkIsQ0FBZ0MsdUJBQWhDLENBQWpCOztBQUVBLFNBQU9ILEtBQUtJLFdBQUwsRUFBUDtBQUNEOztBQUVELFNBQVNDLHdCQUFULEdBQW9DO0FBQ2xDLE1BQUlMLE9BQU8sSUFBSUYsSUFBSixFQUFYO0FBQ0FFLE9BQUtDLFdBQUwsQ0FBaUIsSUFBSUQsS0FBS0UsU0FBTCxDQUFlQyxZQUFuQixDQUFnQyx1QkFBaEMsQ0FBakI7O0FBRUEsU0FBT0gsS0FBS0ksV0FBTCxNQUFzQkosS0FBS00sR0FBTCxDQUFTQyxNQUF0QztBQUNEOztBQUVELFNBQVNDLGNBQVQsQ0FBd0JDLFFBQXhCLEVBQWtDO0FBQ2hDYixVQUFRLHNCQUFSLEVBQWdDYyxPQUFoQyxDQUNFLGtCQURGLEVBRUUsVUFBQ0MsR0FBRCxFQUFNQyxJQUFOLEVBQWU7QUFDYixRQUFJRCxPQUFPLElBQVgsRUFDRSxPQUFPRixTQUFTLEtBQVQsQ0FBUDs7QUFFRixXQUFPQSxTQUFTLElBQVQsQ0FBUDtBQUNELEdBUEg7QUFTRDs7QUFFRCxTQUFTSSxpQkFBVCxHQUE2QjtBQUMzQixTQUFPaEIsU0FBU2lCLFFBQVQsQ0FBa0JDLFVBQWxCLENBQTZCQyxVQUE3QixLQUE0QyxDQUFuRDtBQUNEOztBQUVEQyxRQUFRQyxTQUFSLEdBQW9CLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQjtBQUNyQ1osaUJBQWUsVUFBQ2EsZ0JBQUQsRUFBc0I7QUFDbkMsUUFBSUMsNkJBQTZCakIsMEJBQWpDO0FBQ0EsUUFBSWtCLHNCQUFzQlYsbUJBQTFCOztBQUVBLFdBQU9PLElBQUlJLFdBQUosQ0FBZ0I7QUFDckJDLGNBQVM7QUFDUEMsd0JBQWlCM0IscUJBRFY7QUFFUDRCLHlCQUFrQkwsMEJBRlg7QUFHUE0sd0JBQWlCakMsT0FBT2tDLFlBQVAsQ0FBb0JDLElBQXBCLENBQXlCQyxJQUF6QixLQUFrQyxZQUg1QztBQUlQQyxrQkFBV1QsbUJBSko7QUFLUFUsZUFBUVo7QUFMRCxPQURZO0FBUXJCUSxvQkFBZTtBQUNiRSxjQUFPcEMsT0FBT3VDLFVBQVAsQ0FBa0JDLFdBQWxCLEdBQ0hkLG9CQUFvQkMsMEJBRGpCLEdBRUhDLG1CQUhTO0FBSWJhLG9CQUFhekMsT0FBT2tDLFlBQVAsQ0FBb0JDLElBQXBCLENBQXlCTyxNQUF6QixLQUNQMUMsT0FBT2tDLFlBQVAsQ0FBb0JDLElBQXBCLENBQXlCQyxJQUF6QixLQUFrQyxZQUFsQyxHQUNBVCwwQkFEQSxHQUVBQyxtQkFITyxDQUpBO0FBUWJlLGtCQUFXM0MsT0FBT2tDLFlBQVAsQ0FBb0JDLElBQXBCLENBQXlCUyxJQUF6QixJQUFpQ2hCO0FBUi9CO0FBUk0sS0FBaEIsQ0FBUDtBQW1CRCxHQXZCRDtBQXdCRCxDQXpCRCIsImZpbGUiOiJzZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbmZpZyA9IHJlcXVpcmUoJy9vcHQvY29jb3JpY28vYXBpLXdlYi9jb25maWcuanNvbicpO1xuXG52YXIga2V5c3RvbmUgPSByZXF1aXJlKCdrZXlzdG9uZScpO1xudmFyIFdlYjMgPSByZXF1aXJlKCd3ZWIzJyk7XG5cbmZ1bmN0aW9uIGdldEJsb2NrY2hhaW5TdGF0dXMoKSB7XG4gIHZhciB3ZWIzID0gbmV3IFdlYjMoKTtcbiAgd2ViMy5zZXRQcm92aWRlcihuZXcgd2ViMy5wcm92aWRlcnMuSHR0cFByb3ZpZGVyKCdodHRwOi8vMTI3LjAuMC4xOjg1NDUnKSk7XG5cbiAgcmV0dXJuIHdlYjMuaXNDb25uZWN0ZWQoKTtcbn1cblxuZnVuY3Rpb24gZ2V0QmxvY2tjaGFpbk1pbmVyU3RhdHVzKCkge1xuICB2YXIgd2ViMyA9IG5ldyBXZWIzKCk7XG4gIHdlYjMuc2V0UHJvdmlkZXIobmV3IHdlYjMucHJvdmlkZXJzLkh0dHBQcm92aWRlcignaHR0cDovLzEyNy4wLjAuMTo4NTQ1JykpO1xuXG4gIHJldHVybiB3ZWIzLmlzQ29ubmVjdGVkKCkgJiYgd2ViMy5ldGgubWluaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRRdWV1ZVN0YXR1cyhjYWxsYmFjaykge1xuICByZXF1aXJlKCdhbXFwbGliL2NhbGxiYWNrX2FwaScpLmNvbm5lY3QoXG4gICAgJ2FtcXA6Ly9sb2NhbGhvc3QnLFxuICAgIChlcnIsIGNvbm4pID0+IHtcbiAgICAgIGlmIChlcnIgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGZhbHNlKTtcblxuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YWJhc2VTdGF0dXMoKSB7XG4gIHJldHVybiBrZXlzdG9uZS5tb25nb29zZS5jb25uZWN0aW9uLnJlYWR5U3RhdGUgIT09IDA7XG59XG5cbmV4cG9ydHMuZ2V0U3RhdHVzID0gZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgZ2V0UXVldWVTdGF0dXMoKHF1ZXVlSXNDb25uZWN0ZWQpID0+IHtcbiAgICB2YXIgYmxvY2tjaGFpbk1pbmVySXNDb25uZWN0ZWQgPSBnZXRCbG9ja2NoYWluTWluZXJTdGF0dXMoKTtcbiAgICB2YXIgZGF0YWJhc2VJc0Nvbm5lY3RlZCA9IGdldERhdGFiYXNlU3RhdHVzKCk7XG5cbiAgICByZXR1cm4gcmVzLmFwaVJlc3BvbnNlKHtcbiAgICAgIHN5c3RlbSA6IHtcbiAgICAgICAgYmxvY2tjaGFpbk5vZGUgOiBnZXRCbG9ja2NoYWluU3RhdHVzKCksXG4gICAgICAgIGJsb2NrY2hhaW5NaW5lciA6IGJsb2NrY2hhaW5NaW5lcklzQ29ubmVjdGVkLFxuICAgICAgICBibG9ja2NoYWluVm90ZSA6IGNvbmZpZy5jYXBhYmlsaXRpZXMuYmlsbC52b3RlID09PSAnYmxvY2tjaGFpbicsXG4gICAgICAgIGRhdGFiYXNlIDogZGF0YWJhc2VJc0Nvbm5lY3RlZCxcbiAgICAgICAgcXVldWUgOiBxdWV1ZUlzQ29ubmVjdGVkLFxuICAgICAgfSxcbiAgICAgIGNhcGFiaWxpdGllcyA6IHtcbiAgICAgICAgdm90ZSA6IGNvbmZpZy5ibG9ja2NoYWluLnZvdGVFbmFibGVkXG4gICAgICAgICAgPyBxdWV1ZUlzQ29ubmVjdGVkICYmIGJsb2NrY2hhaW5NaW5lcklzQ29ubmVjdGVkXG4gICAgICAgICAgOiBkYXRhYmFzZUlzQ29ubmVjdGVkLFxuICAgICAgICBjcmVhdGVCaWxsIDogY29uZmlnLmNhcGFiaWxpdGllcy5iaWxsLmNyZWF0ZVxuICAgICAgICAgICYmIChjb25maWcuY2FwYWJpbGl0aWVzLmJpbGwudm90ZSA9PT0gJ2Jsb2NrY2hhaW4nXG4gICAgICAgICAgICA/IGJsb2NrY2hhaW5NaW5lcklzQ29ubmVjdGVkXG4gICAgICAgICAgICA6IGRhdGFiYXNlSXNDb25uZWN0ZWQpLFxuICAgICAgICByZWFkQmlsbCA6IGNvbmZpZy5jYXBhYmlsaXRpZXMuYmlsbC5yZWFkICYmIGRhdGFiYXNlSXNDb25uZWN0ZWQsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcbn1cbiJdfQ==