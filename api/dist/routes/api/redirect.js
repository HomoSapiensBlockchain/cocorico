'use strict';

var config = require('/opt/cocorico/api-web/config.json');

var http = require('follow-redirects').http,
    url = require('url');

exports.redirect = function (req, res) {
  if (!req.headers.referer) return res.status(400).send();

  var ref_parts = url.parse(req.headers.referer, true);
  if (ref_parts.host !== config.hostname) return res.status(400).send();

  return res.redirect(301, req.query.url);
};

exports.proxy = function (req, res) {
  if (!req.headers.referer) return res.status(400).send();

  var ref_parts = url.parse(req.headers.referer, true);
  if (ref_parts.host !== config.hostname) return res.status(400).send();

  var url_parts = url.parse(req.query.url, true);

  return http.request({
    host: url_parts.host,
    path: url_parts.path
  }, function (response) {
    if (response.statusCode === 200) {
      res.writeHead(200, {
        'Content-Type': response.headers['content-type']
      });
      response.pipe(res);
    } else {
      res.writeHead(response.statusCode);
      res.end();
    }
  }).end();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYXBpL3JlZGlyZWN0LmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsInJlcXVpcmUiLCJodHRwIiwidXJsIiwiZXhwb3J0cyIsInJlZGlyZWN0IiwicmVxIiwicmVzIiwiaGVhZGVycyIsInJlZmVyZXIiLCJzdGF0dXMiLCJzZW5kIiwicmVmX3BhcnRzIiwicGFyc2UiLCJob3N0IiwiaG9zdG5hbWUiLCJxdWVyeSIsInByb3h5IiwidXJsX3BhcnRzIiwicmVxdWVzdCIsInBhdGgiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJ3cml0ZUhlYWQiLCJwaXBlIiwiZW5kIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFNBQVNDLFFBQVEsbUNBQVIsQ0FBYjs7QUFFQSxJQUFJQyxPQUFPRCxRQUFRLGtCQUFSLEVBQTRCQyxJQUF2QztBQUFBLElBQ0VDLE1BQU1GLFFBQVEsS0FBUixDQURSOztBQUdBRyxRQUFRQyxRQUFSLEdBQW1CLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQjtBQUNwQyxNQUFJLENBQUNELElBQUlFLE9BQUosQ0FBWUMsT0FBakIsRUFDRSxPQUFPRixJQUFJRyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsRUFBUDs7QUFFRixNQUFJQyxZQUFZVCxJQUFJVSxLQUFKLENBQVVQLElBQUlFLE9BQUosQ0FBWUMsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBaEI7QUFDQSxNQUFJRyxVQUFVRSxJQUFWLEtBQW1CZCxPQUFPZSxRQUE5QixFQUNFLE9BQU9SLElBQUlHLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixFQUFQOztBQUVGLFNBQU9KLElBQUlGLFFBQUosQ0FBYSxHQUFiLEVBQWtCQyxJQUFJVSxLQUFKLENBQVViLEdBQTVCLENBQVA7QUFDRCxDQVREOztBQVdBQyxRQUFRYSxLQUFSLEdBQWdCLFVBQVNYLEdBQVQsRUFBY0MsR0FBZCxFQUFtQjtBQUNqQyxNQUFJLENBQUNELElBQUlFLE9BQUosQ0FBWUMsT0FBakIsRUFDRSxPQUFPRixJQUFJRyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsRUFBUDs7QUFFRixNQUFJQyxZQUFZVCxJQUFJVSxLQUFKLENBQVVQLElBQUlFLE9BQUosQ0FBWUMsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBaEI7QUFDQSxNQUFJRyxVQUFVRSxJQUFWLEtBQW1CZCxPQUFPZSxRQUE5QixFQUNFLE9BQU9SLElBQUlHLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixFQUFQOztBQUVGLE1BQUlPLFlBQVlmLElBQUlVLEtBQUosQ0FBVVAsSUFBSVUsS0FBSixDQUFVYixHQUFwQixFQUF5QixJQUF6QixDQUFoQjs7QUFFQSxTQUFPRCxLQUFLaUIsT0FBTCxDQUNMO0FBQ0VMLFVBQU1JLFVBQVVKLElBRGxCO0FBRUVNLFVBQU1GLFVBQVVFO0FBRmxCLEdBREssRUFLTCxVQUFDQyxRQUFELEVBQWM7QUFDWixRQUFJQSxTQUFTQyxVQUFULEtBQXdCLEdBQTVCLEVBQWlDO0FBQy9CZixVQUFJZ0IsU0FBSixDQUFjLEdBQWQsRUFBbUI7QUFDakIsd0JBQWdCRixTQUFTYixPQUFULENBQWlCLGNBQWpCO0FBREMsT0FBbkI7QUFHQWEsZUFBU0csSUFBVCxDQUFjakIsR0FBZDtBQUNELEtBTEQsTUFLTztBQUNMQSxVQUFJZ0IsU0FBSixDQUFjRixTQUFTQyxVQUF2QjtBQUNBZixVQUFJa0IsR0FBSjtBQUNEO0FBQ0YsR0FmSSxFQWdCTEEsR0FoQkssRUFBUDtBQWlCRCxDQTNCRCIsImZpbGUiOiJyZWRpcmVjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb25maWcgPSByZXF1aXJlKCcvb3B0L2NvY29yaWNvL2FwaS13ZWIvY29uZmlnLmpzb24nKTtcblxudmFyIGh0dHAgPSByZXF1aXJlKCdmb2xsb3ctcmVkaXJlY3RzJykuaHR0cCxcbiAgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbmV4cG9ydHMucmVkaXJlY3QgPSBmdW5jdGlvbihyZXEsIHJlcykge1xuICBpZiAoIXJlcS5oZWFkZXJzLnJlZmVyZXIpXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5zZW5kKCk7XG5cbiAgdmFyIHJlZl9wYXJ0cyA9IHVybC5wYXJzZShyZXEuaGVhZGVycy5yZWZlcmVyLCB0cnVlKTtcbiAgaWYgKHJlZl9wYXJ0cy5ob3N0ICE9PSBjb25maWcuaG9zdG5hbWUpXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5zZW5kKCk7XG5cbiAgcmV0dXJuIHJlcy5yZWRpcmVjdCgzMDEsIHJlcS5xdWVyeS51cmwpO1xufVxuXG5leHBvcnRzLnByb3h5ID0gZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgaWYgKCFyZXEuaGVhZGVycy5yZWZlcmVyKVxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZCgpO1xuXG4gIHZhciByZWZfcGFydHMgPSB1cmwucGFyc2UocmVxLmhlYWRlcnMucmVmZXJlciwgdHJ1ZSk7XG4gIGlmIChyZWZfcGFydHMuaG9zdCAhPT0gY29uZmlnLmhvc3RuYW1lKVxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZCgpO1xuXG4gIHZhciB1cmxfcGFydHMgPSB1cmwucGFyc2UocmVxLnF1ZXJ5LnVybCwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGh0dHAucmVxdWVzdChcbiAgICB7XG4gICAgICBob3N0OiB1cmxfcGFydHMuaG9zdCxcbiAgICAgIHBhdGg6IHVybF9wYXJ0cy5wYXRoLFxuICAgIH0sXG4gICAgKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICAgIHJlcy53cml0ZUhlYWQoMjAwLCB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IHJlc3BvbnNlLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddLFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzcG9uc2UucGlwZShyZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzLndyaXRlSGVhZChyZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgICAgICAgcmVzLmVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgKS5lbmQoKTtcbn1cbiJdfQ==