'use strict';

var config = require('/opt/cocorico/api-web/config.json');

var keystone = require('keystone');
var transform = require('model-transform');

var Types = keystone.Field.Types;

var Ballot = new keystone.List('Ballot', {
  defaultSort: '-updatedAt',
  track: { createdAt: true, updatedAt: true },
  nodelete: config.env !== 'development',
  nocreate: true
});

Ballot.add({
  status: {
    type: Types.Select,
    options: ['signing', 'queued', 'pending', 'initialized', 'registered', 'complete', 'error'],
    required: true,
    initial: true,
    noedit: true
  },
  voter: { type: String, required: true, initial: true, noedit: true },
  vote: { type: Types.Relationship, ref: 'Vote', required: true, initial: true, noedit: true },
  error: { type: String, noedit: true }
});

transform.toJSON(Ballot);

Ballot.defaultColumns = 'time, status, vote, createdAt, updatedAt';
Ballot.register();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvQmFsbG90LmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsInJlcXVpcmUiLCJrZXlzdG9uZSIsInRyYW5zZm9ybSIsIlR5cGVzIiwiRmllbGQiLCJCYWxsb3QiLCJMaXN0IiwiZGVmYXVsdFNvcnQiLCJ0cmFjayIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsIm5vZGVsZXRlIiwiZW52Iiwibm9jcmVhdGUiLCJhZGQiLCJzdGF0dXMiLCJ0eXBlIiwiU2VsZWN0Iiwib3B0aW9ucyIsInJlcXVpcmVkIiwiaW5pdGlhbCIsIm5vZWRpdCIsInZvdGVyIiwiU3RyaW5nIiwidm90ZSIsIlJlbGF0aW9uc2hpcCIsInJlZiIsImVycm9yIiwidG9KU09OIiwiZGVmYXVsdENvbHVtbnMiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxRQUFRLG1DQUFSLENBQWI7O0FBRUEsSUFBSUMsV0FBV0QsUUFBUSxVQUFSLENBQWY7QUFDQSxJQUFJRSxZQUFZRixRQUFRLGlCQUFSLENBQWhCOztBQUVBLElBQUlHLFFBQVFGLFNBQVNHLEtBQVQsQ0FBZUQsS0FBM0I7O0FBRUEsSUFBSUUsU0FBUyxJQUFJSixTQUFTSyxJQUFiLENBQWtCLFFBQWxCLEVBQTRCO0FBQ3ZDQyxlQUFhLFlBRDBCO0FBRXZDQyxTQUFPLEVBQUVDLFdBQVcsSUFBYixFQUFtQkMsV0FBVyxJQUE5QixFQUZnQztBQUd2Q0MsWUFBVVosT0FBT2EsR0FBUCxLQUFlLGFBSGM7QUFJdkNDLFlBQVU7QUFKNkIsQ0FBNUIsQ0FBYjs7QUFPQVIsT0FBT1MsR0FBUCxDQUFXO0FBQ1RDLFVBQVE7QUFDTkMsVUFBTWIsTUFBTWMsTUFETjtBQUVOQyxhQUFTLENBQUMsU0FBRCxFQUFZLFFBQVosRUFBc0IsU0FBdEIsRUFBaUMsYUFBakMsRUFBZ0QsWUFBaEQsRUFBOEQsVUFBOUQsRUFBMEUsT0FBMUUsQ0FGSDtBQUdOQyxjQUFVLElBSEo7QUFJTkMsYUFBUyxJQUpIO0FBS05DLFlBQVE7QUFMRixHQURDO0FBUVRDLFNBQU8sRUFBRU4sTUFBTU8sTUFBUixFQUFnQkosVUFBVSxJQUExQixFQUFnQ0MsU0FBUyxJQUF6QyxFQUErQ0MsUUFBUSxJQUF2RCxFQVJFO0FBU1RHLFFBQU0sRUFBRVIsTUFBTWIsTUFBTXNCLFlBQWQsRUFBNEJDLEtBQUssTUFBakMsRUFBeUNQLFVBQVUsSUFBbkQsRUFBeURDLFNBQVMsSUFBbEUsRUFBd0VDLFFBQVEsSUFBaEYsRUFURztBQVVUTSxTQUFPLEVBQUVYLE1BQU1PLE1BQVIsRUFBZ0JGLFFBQVEsSUFBeEI7QUFWRSxDQUFYOztBQWFBbkIsVUFBVTBCLE1BQVYsQ0FBaUJ2QixNQUFqQjs7QUFFQUEsT0FBT3dCLGNBQVAsR0FBd0IsMENBQXhCO0FBQ0F4QixPQUFPeUIsUUFBUCIsImZpbGUiOiJCYWxsb3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29uZmlnID0gcmVxdWlyZSgnL29wdC9jb2Nvcmljby9hcGktd2ViL2NvbmZpZy5qc29uJyk7XG5cbnZhciBrZXlzdG9uZSA9IHJlcXVpcmUoJ2tleXN0b25lJyk7XG52YXIgdHJhbnNmb3JtID0gcmVxdWlyZSgnbW9kZWwtdHJhbnNmb3JtJyk7XG5cbnZhciBUeXBlcyA9IGtleXN0b25lLkZpZWxkLlR5cGVzO1xuXG52YXIgQmFsbG90ID0gbmV3IGtleXN0b25lLkxpc3QoJ0JhbGxvdCcsIHtcbiAgZGVmYXVsdFNvcnQ6ICctdXBkYXRlZEF0JyxcbiAgdHJhY2s6IHsgY3JlYXRlZEF0OiB0cnVlLCB1cGRhdGVkQXQ6IHRydWUgfSxcbiAgbm9kZWxldGU6IGNvbmZpZy5lbnYgIT09ICdkZXZlbG9wbWVudCcsXG4gIG5vY3JlYXRlOiB0cnVlLFxufSk7XG5cbkJhbGxvdC5hZGQoe1xuICBzdGF0dXM6IHtcbiAgICB0eXBlOiBUeXBlcy5TZWxlY3QsXG4gICAgb3B0aW9uczogWydzaWduaW5nJywgJ3F1ZXVlZCcsICdwZW5kaW5nJywgJ2luaXRpYWxpemVkJywgJ3JlZ2lzdGVyZWQnLCAnY29tcGxldGUnLCAnZXJyb3InXSxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICBpbml0aWFsOiB0cnVlLFxuICAgIG5vZWRpdDogdHJ1ZSxcbiAgfSxcbiAgdm90ZXI6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSwgaW5pdGlhbDogdHJ1ZSwgbm9lZGl0OiB0cnVlIH0sXG4gIHZvdGU6IHsgdHlwZTogVHlwZXMuUmVsYXRpb25zaGlwLCByZWY6ICdWb3RlJywgcmVxdWlyZWQ6IHRydWUsIGluaXRpYWw6IHRydWUsIG5vZWRpdDogdHJ1ZSB9LFxuICBlcnJvcjogeyB0eXBlOiBTdHJpbmcsIG5vZWRpdDogdHJ1ZSB9LFxufSk7XG5cbnRyYW5zZm9ybS50b0pTT04oQmFsbG90KTtcblxuQmFsbG90LmRlZmF1bHRDb2x1bW5zID0gJ3RpbWUsIHN0YXR1cywgdm90ZSwgY3JlYXRlZEF0LCB1cGRhdGVkQXQnO1xuQmFsbG90LnJlZ2lzdGVyKCk7XG4iXX0=